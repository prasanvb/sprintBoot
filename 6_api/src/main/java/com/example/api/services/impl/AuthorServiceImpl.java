package com.example.api.services.impl;

import com.example.api.domain.entity.AuthorEntity;
import com.example.api.repositories.AuthorRepository;
import com.example.api.services.AuthorService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

@Service
public class AuthorServiceImpl implements AuthorService {
    private final AuthorRepository authorRepository;

    public AuthorServiceImpl(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }

    /**
     * Saves new author entity. ID auto-generated by SEQUENCE.
     * Implied transactional through JPA.
     */
    @Override
    public AuthorEntity createAuthor(AuthorEntity authorEntity) {
        return authorRepository.save(authorEntity);
    }

    @Override
    public List<AuthorEntity> findAll(){
        Iterable<AuthorEntity> allAuthors = authorRepository.findAll();
        // stream method from StreamSupport class converts the iterable result to a new sequential or parallel stream from a Spliterator.
        // collect method from Stream class accumulates the elements of this stream into a List. The elements in the list will be in this stream's encounter order, if one exists.
        // Collector accumulates the input elements into a new List. There are no guarantees on the type, mutability, serializability, or thread-safety of the List.
        return StreamSupport
                .stream(allAuthors.spliterator(), false)
                .collect(Collectors.toList());
    }
}
