package com.example.api.services.impl;

import com.example.api.domain.entity.AuthorEntity;
import com.example.api.repositories.AuthorRepository;
import com.example.api.services.AuthorService;
import com.example.api.utils.UtilityMethods;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class AuthorServiceImpl implements AuthorService {
    private final AuthorRepository authorRepository;

    public AuthorServiceImpl(AuthorRepository authorRepository) {
        this.authorRepository = authorRepository;
    }

    /**
     * Saves new author entity. ID auto-generated by SEQUENCE.
     * Implied transactional through JPA.
     */
    @Override
    public AuthorEntity saveAuthor(AuthorEntity authorEntity) {
        return authorRepository.save(authorEntity);
    }

    @Override
    public List<AuthorEntity> findAll() {
        Iterable<AuthorEntity> allAuthors = authorRepository.findAll();
        return UtilityMethods.getAuthorEntityList(allAuthors);
    }

    @Override
    public List<AuthorEntity> findAuthorsAgeLessThan(int age) {
        Iterable<AuthorEntity> authors = authorRepository.ageLessThan(age);
        return UtilityMethods.getAuthorEntityList(authors);
    }

    @Override
    public List<AuthorEntity> findAuthorsAgeGreaterThan(int age) {
        Iterable<AuthorEntity> authors = authorRepository.findAuthorsAgeGreaterThan(age);
        return UtilityMethods.getAuthorEntityList(authors);
    }

    @Override
    public List<AuthorEntity> findAuthorsByName(String name) {
        Iterable<AuthorEntity> authors = authorRepository.findAuthorByName(name);
        return UtilityMethods.getAuthorEntityList(authors);
    }

    @Override
    public Optional<AuthorEntity> findById(Long id) {
        return authorRepository.findById(id);
    }

    @Override
    public Boolean isExists(Long id) {
        return authorRepository.existsById(id);
    }

}
